// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BeatMapInfo;
//
//    var beatMapInfo = BeatMapInfo.FromJson(jsonString);

namespace BeatMapInfo
{
    using System;
    using Newtonsoft.Json;
    using J = Newtonsoft.Json.JsonPropertyAttribute;
    using R = Newtonsoft.Json.Required;
    using N = Newtonsoft.Json.NullValueHandling;

    /// <summary>Beat Saber Beatmap Info</summary>
    public partial class BeatMapInfo
    {
        [J("$schema", NullValueHandling = N.Ignore)]                               public Uri Schema { get; set; }                         
        [J("_allDirectionsEnvironmentName", NullValueHandling = N.Ignore)]         public string AllDirectionsEnvironmentName { get; set; }
        [J("_beatsPerMinute")][JsonConverter(typeof(MinMaxValueCheckConverter))]   public double BeatsPerMinute { get; set; }              
        [J("_coverImageFilename")]                                                 public string CoverImageFilename { get; set; }          
        [J("_customData", NullValueHandling = N.Ignore)]                           public BeatMapInfoCustomData CustomData { get; set; }    // Top-level custom data
        [J("_difficultyBeatmapSets")]                                              public BeatmapSet[] DifficultyBeatmapSets { get; set; } 
        [J("_environmentName")]                                                    public string EnvironmentName { get; set; }             
        [J("_levelAuthorName")]                                                    public string LevelAuthorName { get; set; }             
        [J("_previewDuration")][JsonConverter(typeof(MinMaxValueCheckConverter))]  public double PreviewDuration { get; set; }              // Duration (in seconds) of level audio preview
        [J("_previewStartTime")][JsonConverter(typeof(MinMaxValueCheckConverter))] public double PreviewStartTime { get; set; }             // How long (in seconds) into beatmap audio the level preview will start
        [J("_shuffle")][JsonConverter(typeof(MinMaxValueCheckConverter))]          public double Shuffle { get; set; }                      // Time (in beats) of how much a note should shift when shuffled
        [J("_shufflePeriod")][JsonConverter(typeof(MinMaxValueCheckConverter))]    public double ShufflePeriod { get; set; }                // Time (in beats) of how often a note should shift
        [J("_songAuthorName")]                                                     public string SongAuthorName { get; set; }               // Artist of this Beatmap's song
        [J("_songFilename")]                                                       public string SongFilename { get; set; }                
        [J("_songName")]                                                           public string SongName { get; set; }                    
        [J("_songSubName")]                                                        public string SongSubName { get; set; }                 
        [J("_songTimeOffset")]                                                     public double SongTimeOffset { get; set; }               // Offset between beatmap and audio (seconds)
        [J("_version")]                                                            public string Version { get; set; }                     
    }

    public partial class BeatMapInfo
    {
        public static BeatMapInfo FromJson(string json) => JsonConvert.DeserializeObject<BeatMapInfo>(json, BeatMapInfoConverter.Settings);
    }
}
